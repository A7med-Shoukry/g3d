#version 120 // -*- c++ -*-
#extension GL_EXT_gpu_shader4 : require // Allows GLSL 1.3 texelFetch2D
#define texelFetch texelFetch2D         // Allows GLSL 1.3 texelFetch2D

#define PI (3.1415926)

uniform sampler2D WS_POSITION_buffer;
uniform vec2 WS_POSITION_readScaleBias;

uniform sampler2D WS_NORMAL_buffer;
uniform vec2 WS_NORMAL_readScaleBias;

// We know that we're not using scale and bias with these, so don't bother 
// bringing in the constants for them
uniform sampler2D LAMBERTIAN_buffer;
uniform sampler2D GLOSSY_buffer;

uniform vec3      wsEye;

// Direction to the light in world space
const vec3 w_i            = vec3(0.0, 0.71, 0.71);
const vec3 lightRadiance  = vec3(5.0, 5.0, 4.5);
const vec3 ambient        = vec3(0.3, 0.4, 0.5);

/** Computes x<sup>5</sup> */
float pow5(in float x) {
    float x2 = x * x;
    return x2 * x2 * x;
}

/** Compute Schlick's approximation of the Fresnel coefficient.  The
    original goes to 1.0 at glancing angles, which makes objects
    appear to glow, so we clamp it.

    We never put a Fresnel term on perfectly diffuse surfaces, so if
    F0 is exactly black we keep the result black.
    */
// Must match GLG3D/SuperBSDF.h
vec3 computeF(in vec3 F0, in float cos_i) {
    return (F0.r + F0.g + F0.b > 0.0) ? (mix(F0, vec3(1.0), clamp(pow5(1.0 - cos_i), 0.0, 0.3))) : F0;
}

float square(in float x) {
    return x * x;
}

/** Matches SuperBSDF::unpackSpecularExponent*/
float unpackSpecularExponent(in float e) {
    return square((e * 255.0 - 1.0) * (1.0 / 253.0)) * 1024.0 + 1.0;
}


void main() {
    // Screen-space point being shaded
    ivec2 C = ivec2(gl_FragCoord.xy);
    
    // Surface normal
    vec3 n = texelFetch(WS_NORMAL_buffer, C, 0).xyz;
    if (dot(n, n) < 0.01) {
        // This is a background pixel, not part of an object
        discard;
    } else {
        n = n  * WS_NORMAL_readScaleBias.x + vec3(WS_NORMAL_readScaleBias.y);
    }

    // Point being shaded
    vec3 X = texelFetch(WS_POSITION_buffer, C, 0).xyz * WS_POSITION_readScaleBias.x + vec3(WS_POSITION_readScaleBias.y);
    
    // View vector
    vec3 w_o = normalize(wsEye - X);
    
    // Half vector
    vec3 w_h = normalize(w_i + w_o);

    // Cosine of the angle of incidence
    float cos_i = dot(n, w_o);
    
    // Lambertian coefficient in BSDF
    vec3 p_L  = texelFetch(LAMBERTIAN_buffer, C, 0).rgb / PI;

    // Glossy coefficient in BSDF (this code unpacks G3D::SuperBSDF's encoding)
    vec4 temp = texelFetch(GLOSSY_buffer, C, 0);
    float exponent = unpackSpecularExponent(temp.a);
    vec3 p_G = computeF(temp.rgb * ((exponent + 8.0) / (8.0 * PI)), max(0.0, cos_i));
    
    // Energy-conserving Phong shading
    gl_FragColor.rgb =
        
        ambient * p_L +
        
        lightRadiance * 
        (p_L + p_G * pow(max(dot(n, w_h), 0.0), exponent)) * max(dot(n, w_i), 0.0);
}
