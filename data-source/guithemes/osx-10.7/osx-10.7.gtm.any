// G3D Gui Skin file
// OS X skin by Morgan McGuire 2007-2010
{
    name = "OS X 10.7",
    format = 1.0,

    // osx or win
    windowButtonStyle = "osx",

    // Optional font section
    font = TextStyle {
       // Every entry in the font section and the order of the entries
       // are optional

       // Recommendation; does not fail if this can't be loaded
       face = "LucidaSans.fnt",
       size = 12,
       color = Color4(0, 0, 0, 1),
       outlineColor = Color4(0, 0, 0, 0)
    },

    // Optional disabled font section.  Used for captions and labels of disabled controls.
    // Inherits unspecified properties from font.
    disabledFont = TextStyle {
       color = Color4(0.4, 0.4, 0.4, 1)
    },

    // The order and presence of all other sections is manditory

    checkBox = Checkable {
        // Every control can begin with an optional font section and an optional disabledFont section.
        // They are not shown here.

       enabled = Checkable::Focus {
          focused = Checkable::Pair {
              checked   = Rect2D::xywh(141,   5,  20,  24),
              unchecked = Rect2D::xywh(113,   5,  20,  24) 
          },
          defocused = Checkable::Pair {
              checked   = Rect2D::xywh( 30,   5,  20,  24),
              unchecked = Rect2D::xywh(  3,   5,  20,  24) 
          }
       },

       disabled = Checkable::Pair {
          checked   = Rect2D::xywh( 84,   5,  20,  24),
          unchecked = Rect2D::xywh( 57,   5,  20,  24)
       },

       // Distance from the center of the right edge
       textOffset = Vector2(1, -1)
    },

    radioButton = Checkable {
       enabled = Checkable::Focus {
          focused = Checkable::Pair {
              checked   = Rect2D::xywh(141,  28,  20,  24),
              unchecked = Rect2D::xywh(113,  28,  20,  24) 
          },
          defocused = Checkable::Pair {
              checked   = Rect2D::xywh( 30,  28,  20,  24),
              unchecked = Rect2D::xywh(  3,  28,  20,  24) 
          }
       },
       disabled = Checkable::Pair {
          checked   = Rect2D::xywh( 84,  28,  20,  24),
          unchecked = Rect2D::xywh( 57,  28,  20,  24)
       },

       textOffset = Vector2(1, 0)
    },

    button = Button {
        // General bounds for dividing up the button
        base = StretchRectHV {
            top = StretchRectH { 
                left    = Rect2D::xywh(163,  54,  13,  13),
                center  = Fill {
                    source  = Rect2D::xywh(176,  54,   1,  13), 
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right   = Rect2D::xywh(177,  54,  13,  13)
            },
            
            centerLeft = Fill {
                source  = Rect2D::xywh(163,  67,  13,   1),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh(176,  67,   1,   1),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerRight = Fill {
                source  = Rect2D::xywh(177,  67,  13,   1),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(163,  68,  13,  13),
                center = Fill {
                    source = Rect2D::xywh(176,  68,   1,  13),
                    hmode  = "STRETCH",
                    vmode  = "STRETCH"
                },                    
                right  = Rect2D::xywh(177,  68,  13,  13)
            }
        },

        textOffset = Vector2(0, 0),

        // Offsets of different modes
        enabled = Button::Focus {
           focused = Button::Pair {
               down = Vector2(0, 0),
               up = Vector2(-33, 0)
           },
           defocused = Button::Pair {
               down = Vector2(-131, 0),
               up = Vector2(-163, 0) 
           }
        },
        disabled = Button::Pair {
            down = Vector2(-65, 0),
            up = Vector2(-99, 0)
        }
    },

    toolButton = Button {
        // Tool buttons must have small enough corners to shrink down to 10x10.
        // Because they are generally packed tightly together, *external* shadows
        // and glows are discouraged; they would waste space on that 10x10 size.

        // General bounds for dividing up the button
        base = StretchRectHV {
            top = StretchRectH {
                left    = Rect2D::xywh(  3,  84,   2,   2),
                center  = Fill {
                    source  = Rect2D::xywh(  5,  84,   6,   2),
                    hmode   = "STRETCH", 
                    vmode   = "STRETCH"
                },
                right   = Rect2D::xywh( 11,  84,   2,   2)
            },
            
            centerLeft   = Fill {
                source  = Rect2D::xywh(  3,  86,   2,   6),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh(  5,  86,   6,   6),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh( 11,  86,   2,   6),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(  3,  92,   2,   2),
                center = Fill {
                    source  = Rect2D::xywh(  5,  92,   6,   2),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh( 11,  92,   2,   2)
            }
        },

        textOffset = Vector2(0, 0),

        // Offsets of different modes
        enabled = Button::Focus {
           focused = Button::Pair {
               down = Vector2(75, 0),
               up   = Vector2(60, 0)
           },
           defocused = Button::Pair {
               down = Vector2(15, 0),
               up = Vector2(0, 0) 
           }
        },
        disabled = Button::Pair {
            down = Vector2(45, 0),
            up = Vector2(30, 0)
        }
    },


    closeButton = WindowButton {
        base = Rect2D::xywh(176, 238, 16, 16),
        
        // Mouse over pressed
        focusedDown = Vector2(32, 0),

        // Mouse over not pressed
        focusedUp = Vector2(0, 0),

        // Mouse not over
        defocused = Vector2(16, 0),

        // Window is out of focus
        windowDefocused = Vector2(48, 0)
    },

    window = Window {
        // General bounds for dividing up the window
        base = StretchRectHV { 
            top = StretchRectH {
                left      = Rect2D::xywh(  0, 134,  21,  28),
                center    = Fill {
                    source  = Rect2D::xywh( 21, 134,  37,  28),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right     = Rect2D::xywh( 57, 134,  21,  28)
            },
            
            centerLeft   = Fill {
                source  = Rect2D::xywh(  0, 162,  21,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh( 21, 162,  37,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh( 57, 162,  21,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(  0, 278,  21,  25),
                center = Fill {
                    source  = Rect2D::xywh( 21, 278,  37,  25),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh( 57, 278,  21,  28)
            }
        },

        borderPad = Pad {
            // Add to the top and left to reach the corner of the actual window
            topLeft    = Vector2( 13, 5),

            // Subtract from the bottom and right to reach the actual window
            bottomRight = Vector2( 12, 21)
        },

        // Includes title bar
        borderThickness = Pad {
            topLeft    = Vector2(1, 23),
            bottomRight = Vector2(1, 1)
        },

        // Padding relative to the border interior to reach the client area
        clientPad = Pad {
            topLeft   = Vector2(0, 0),
            bottomRight = Vector2(0, 0)
        },

        // Offsets from base different modes
        focused = Vector2(0, 0),
        defocused = Vector2(80, 0)
    },

    toolWindow = Window {
        // Windows begin with an optional "font" section and an optional "defocusedFont" section

        // General bounds for dividing up the window
        base = StretchRectHV {
            top = StretchRectH { 
                left    = Rect2D::xywh(162, 134,  21,  28),
                center  = Fill {
                    source  = Rect2D::xywh(183, 134,  37,  28),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right   = Rect2D::xywh(219, 134,  21,  28)
            },
            
            // Reuses the regular window frame
            centerLeft   = Fill {
                source  = Rect2D::xywh(  0, 162,  21,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh( 21, 162,  37,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh( 57, 162,  21,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(  0, 278,  21,  25),
                center = Fill {
                    source  = Rect2D::xywh( 21, 278,  37,  25),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh( 57, 278,  21,  28)
            }
        },

        borderPad = Pad {
            // Add to the top and left to reach the corner of the actual window
            topLeft    = Vector2( 13, 6),

            // Subtract from the bottom and right to reach the actual window
            bottomRight = Vector2( 12, 21)
        },

        borderThickness = Pad {
            topLeft    = Vector2(1, 11),
            bottomRight = Vector2(1, 1)
        },

        // Padding relative to the border to reach the client area
        clientPad = Pad {
            topLeft   = Vector2(0, 0),
            bottomRight = Vector2(0, 0)
        },

        // Offsets of different modes
        focused = Vector2(0, 0),
        defocused = Vector2(80, 0)
    },


    dialogWindow = Window {
        // General bounds for dividing up the window
        base = StretchRectHV { 
            top = StretchRectH {
                left      = Rect2D::xywh(  0, 134,  21,  28),
                center    = Fill {
                    source  = Rect2D::xywh( 21, 134,  37,  28),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right     = Rect2D::xywh( 57, 134,  21,  28)
            },
            
            centerLeft   = Fill {
                source  = Rect2D::xywh(  0, 162,  21,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh( 21, 162,  37,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh( 57, 162,  21,  116),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(  0, 278,  21,  25),
                center = Fill { 
                    source  = Rect2D::xywh( 21, 278,  37,  25),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh( 57, 278,  21,  28)
            }
        },

        borderPad = Pad {
            // Add to the top and left to reach the corner of the actual window
            topLeft    = Vector2( 13, 5),

            // Subtract from the bottom and right to reach the actual window
            bottomRight = Vector2( 12, 21)
        },

        borderThickness = Pad {
            topLeft    = Vector2(1, 23),
            bottomRight = Vector2(1, 1)
        },

        // Padding relative to the border interior to reach the client area
        clientPad = Pad {
            topLeft   = Vector2(0, 0),
            bottomRight = Vector2(0, 0)
        },

        // Offsets from base different modes
        focused = Vector2(0, 0),
        defocused = Vector2(80, 0)
    },



    // Drawers are small windows that slide out of the sides of other windows
    drawer = Window {
        // General bounds for dividing up the drawer window
        base = StretchRectHV {
            top = StretchRectH { 
                left      = Rect2D::xywh(253, 170,  15,  14),
                center    = Fill {
                    source  = Rect2D::xywh(268, 170,  13,  14),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right     = Rect2D::xywh(281, 170,  15,  14)
            },
            
            centerLeft   = Fill {
                source  = Rect2D::xywh(253, 184,  15,  72),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh(268, 184,  13,  72),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh(281, 184,  15,  72),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(253, 253,  15,  19),
                center = Fill {
                    source  = Rect2D::xywh(268, 253,  13,  19),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh(281, 253,  15,  19)
            }
        },

        borderPad = Pad {
            // Add to the top and left to reach the corner of the actual window
            topLeft    = Vector2( 5, 2),

            // Subtract from the bottom and right to reach the actual window
            bottomRight = Vector2( 9, 10)
        },

        borderThickness = Pad {
            topLeft    = Vector2(5, 5),
            bottomRight = Vector2(5, 5)
        },

        // Padding relative to the inside of the border to reach the client area
        clientPad = Pad {
            topLeft     = Vector2(1, 4),
            bottomRight = Vector2(1, 3)
        },

        // Offsets from base different modes
        focused = Vector2(0, 0),

        // (osx skin uses the same images for both modes, but these could be different for other skins)
        defocused = Vector2(0, 0)
    },


    menu = Window {
        // General bounds for dividing up the window
        base = StretchRectHV {
            top = StretchRectH { 
                left      = Rect2D::xywh(371, 158,   6,  14),
                center    = Fill {
                    source  = Rect2D::xywh(377, 158,  51,  14),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right     = Rect2D::xywh(428, 158,   6,  14)
            },
            
            centerLeft   = Fill {
                source  = Rect2D::xywh(371, 171,   6,  108),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh(377, 171,  51,  108),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh(428, 171,   6,  108),
                hmode   = "STRETCH",
                vmode   = "TILE"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(371, 279,   6,  13),
                center = Fill {
                    source  = Rect2D::xywh(377, 279,  51,  13),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh(428, 279,   6,  13)
            }
        },

        borderPad = Pad {
            // Add to the top and left to reach the corner of the actual window
            topLeft    = Vector2( 5, 4),

            // Subtract from the bottom and right to reach the actual window
            bottomRight = Vector2( 5, 10)
        },

        borderThickness = Pad {
            topLeft    = Vector2(1, 1),
            bottomRight = Vector2(1, 1)
        },

        // Padding relative to the border interior to reach the client area
        clientPad = Pad {
            topLeft   = Vector2(0, 0),
            bottomRight = Vector2(0, 0)
        },

        // Offsets from base different modes
        focused = Vector2(0, 0),
        defocused = Vector2(0, 0)
    },

    horizontalSlider = HSlider {
        bar = HSlider::Bar {
            base = StretchRectH {
                left = Rect2D::xywh(168, 6, 4, 7),
                center = Fill {
                    source  = Rect2D::xywh(172, 6, 10, 7),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right = Rect2D::xywh(192, 6, 4, 7)
            },

            enabled = Vector2(0, 0),
            disabled = Vector2(0, 13)
        },

        thumb = HSlider::Thumb {
            base = Rect2D::xywh(205, 30, 20, 21),
            enabled = HSlider::Thumb::Focus {
                focused = Vector2(2, 0),
                defocused = Vector2(-38, 0)
            },
            disabled = Vector2(-19, 0)
        }
    },

    simplePane = Pane {
        frame = StretchRectHV {
            top = StretchRectH {
                left      = Rect2D::xywh(208, 183,   0,  6),
                center    = Fill {
                    source  = Rect2D::xywh(212, 183,  22,  6),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right     = Rect2D::xywh(137, 183,   0,  6)
            },
            
            centerLeft   = Fill {
                source  = Rect2D::xywh(208, 189,   0,  0),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh(208, 189,   1,  0),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh(208, 189,   0,  0),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(208, 189,   0,  0),
                center = Fill {
                    source  = Rect2D::xywh(208, 189,   1,  0),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh(208, 189,   0,  0)
            }
        },

        // Padding relative to the border to reach the client area
        clientPad = Pad {
            topLeft   = Vector2(0, 0),
            bottomRight = Vector2(0, 0)
        }
    },


    ornatePane = Pane {
        frame = StretchRectHV {
            top = StretchRectH {
                left      = Rect2D::xywh(163, 172,  7,  7),
                center    = Fill {
                    source  = Rect2D::xywh(171, 172,  12,  7),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right     = Rect2D::xywh(183, 172,  7,  7)
            },
                        
            // Reuses the regular window frame
            centerLeft   = Fill {
                source  = Rect2D::xywh(164, 179,  7,  12),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh(171, 179,  12,  12),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh(183, 179,  7,  12),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            
            bottom = StretchRectH {
                left   = Rect2D::xywh(164, 191,  7,  7),
                center = Fill {
                    source  = Rect2D::xywh(171, 191,  12,  7),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh(183, 191,  7,  7)
            }
        },

        // Padding relative to the border to reach the client area
        clientPad = Pad {
            topLeft   = Vector2(4, 4),
            bottomRight = Vector2(4, 3)
        }
    },

    // Note: textBox is also used for combo box, so it must
    // line up with the combo box bounds in terms of padding
    // at the top
    textBox = TextBox {
       
        contentFont = TextStyle {
            // Optional section for describing the font for the interior of the text box.
            // If there is also a font section for the textBox, it must come first.
            // The label uses the "font = " specification.
        },

        // General bounds for dividing up the textBox
        base = StretchRectHV {
            top = StretchRectH { 
                left      = Rect2D::xywh(283,  2,   6,  6),
                center    = Fill {
                    source  = Rect2D::xywh(288,  2,  15,  6),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right     = Rect2D::xywh(303,  2,   6,  6)
            },
            
            centerLeft   = Fill {
                source  = Rect2D::xywh(283,  8,   6,  14),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh(288,  8,  15,  14),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh(303,  8,   6,  14),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            
            bottom = StretchRectH { 
                left   = Rect2D::xywh(283,  22,  6,  6),
                center = Fill {
                    source  = Rect2D::xywh(288,  22, 15,  6),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh(303,  22,  6,  6)
            }
        },

        // Offset of text area itself
        textPad = Pad {
           topLeft = Vector2(8, 6),
           bottomRight = Vector2(8, 6)
        },

        // Offsets of different modes
        enabled = TextBox::Focus {
           // Used when typing, but not for mouse-over
           focused = Vector2(0, 53),
           defocused = Vector2(0, 0)
        },

        disabled = Vector2(0, 27)
    },

    dropDownList = DropDownList {
        // General bounds for dividing up the list box (a menu is used
        // for the list itself when it appears).  Note that the height
        // of the box is fixed.  The button should be entirely contained
        // inside either the left or right.

        base = StretchRectH {
            left   = Rect2D::xywh(390,  63,   9,  27),
            center = Fill {
                source  = Rect2D::xywh(399,  63,  15,  27),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            right  = Rect2D::xywh(416,  63,  24,  27)
        },

        // Offset of text area itself
        textPad = Pad {
           topLeft = Vector2(7, 6),
           bottomRight = Vector2(24, 6)
        },
        
        // Offsets of different modes
        enabled = DropDownList::Focus {
           focused = DropDownList::Pair {
              down = Vector2(0, 0),
              up = Vector2(-54, 0)
           },
           defocused = Vector2(-54, -29)
        },

        disabled = Vector2(0, -29)
    },
    
    canvas = Canvas {

        // General bounds for dividing up the textBox
        base = StretchRectHV {
            top = StretchRectH { 
                left      = Rect2D::xywh(283,  2,   6,  6),
                center    = Fill {
                    source  = Rect2D::xywh(288,  2,  15,  6),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right     = Rect2D::xywh(303,  2,   6,  6)
            },
            
            centerLeft   = Fill {
                source  = Rect2D::xywh(283,  8,   6,  14),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerCenter = Fill {
                source  = Rect2D::xywh(288,  8,  15,  14),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            centerRight  = Fill {
                source  = Rect2D::xywh(303,  8,   6,  14),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            
            bottom = StretchRectH { 
                left   = Rect2D::xywh(283,  22,  6,  6),
                center = Fill {
                    source  = Rect2D::xywh(288,  22, 15,  6),
                    hmode   = "STRETCH",
                    vmode   = "STRETCH"
                },
                right  = Rect2D::xywh(303,  22,  6,  6)
            }
        },

        pad = Pad {
            topLeft     = Vector2(3, 4),
            bottomRight = Vector2(4, 4)
        },

        // Offsets of different modes
        enabled = TextBox::Focus {
           // Used when typing, but not for mouse-over
           focused = Vector2(0, 53),
           defocused = Vector2(0, 0)
        },

        disabled = Vector2(0, 27)
    },

    // Background of the selected item from a menu
    selection = StretchRectHV {
        top = StretchRectH {
            left      = Rect2D::xywh(  2,  98,   4,   4),
            center    = Fill {
                source  = Rect2D::xywh(  6,  98,   4,   4),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            right     = Rect2D::xywh( 10,  98,   4,   4)
        },
        
        centerLeft   = Fill {
            source  = Rect2D::xywh(  2, 102,   4,   5),
            hmode   = "STRETCH",
            vmode   = "STRETCH"
        },
        centerCenter = Fill {
            source  = Rect2D::xywh(  6, 102,   4,   5),
            hmode   = "STRETCH",
            vmode   = "STRETCH"
        },
        centerRight  = Fill {
            source  = Rect2D::xywh( 10, 102,   4,   5),
            hmode   = "STRETCH",
            vmode   = "STRETCH"
        },
        
        bottom = StretchRectH {
            left   = Rect2D::xywh(  2, 105,   4,   4),
            center = Fill {
                source  = Rect2D::xywh(  6, 105,   4,   4),
                hmode   = "STRETCH",
                vmode   = "STRETCH"
            },
            right  = Rect2D::xywh( 10, 105,   4,   4)
        }
    }
    
}
